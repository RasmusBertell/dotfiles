/* See LICENSE file for copyright and license details. */
#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 1; /* border pixel of windows */
static const unsigned int snap      = 8; /* snap pixel */

static const int showbar = 1; /* 0 means no bar */
static const int topbar  = 1; /* 0 means bottom bar */

static const char *fonts[]    = {
    "Fira Code:size=10:antialias=true:autohint=true",
    "Font Awesome 5 Free:size=10:antialias=true:autohint=true",
    "Font Awesome 5 Brands:size=10:antialias=true:autohint=true",
};
static const char dmenufont[] = "Fira Code:size=10:antialias=true:autohint=true";

static const char color_black         [] = "#282828";
static const char color_red           [] = "#cc241d";
static const char color_green         [] = "#98971a";
static const char color_yellow        [] = "#d79921";
static const char color_blue          [] = "#458588";
static const char color_magenta       [] = "#b16286";
static const char color_cyan          [] = "#689d6a";
static const char color_white         [] = "#a89984";
static const char color_light_black   [] = "#928374";
static const char color_light_red     [] = "#fb4934";
static const char color_light_green   [] = "#b8bb26";
static const char color_light_yellow  [] = "#fabd2f";
static const char color_light_blue    [] = "#83a598";
static const char color_light_magenta [] = "#d3869b";
static const char color_light_cyan    [] = "#8ec07c";
static const char color_light_white   [] = "#ebdbb2";

static const char *colors[][3]      = {
                  /* fg                 bg           border */
    [SchemeNorm] = { color_light_white, color_black, color_white },
    [SchemeSel]  = { color_yellow,      color_black, color_yellow },
};

static const char *const autostart[] = {
    "xsetroot", "-solid", "#282828", NULL,
    "sh", "-c", "while :; do xsetroot -name \"$(date '+%x - %R')\"; sleep 10; done", NULL,
    "dunst", NULL,
    NULL /* terminate */
};

/* tagging */
static const char *tags[] = { "", "", "", "", "", "", "", "", "" };

static const Rule rules[] = {
    /* xprop(1):
     *  WM_CLASS(STRING) = instance, class
     *  WM_NAME(STRING) = title
     */
    /* class                        instance  title  tags mask  isfloating  monitor */
    { "st-256color",                NULL,     NULL,  1<<0,      0,          -1 },
    { "Firefox",                    NULL,     NULL,  1<<1,      0,          -1 },
    { "Microsoft Teams - Preview",  NULL,     NULL,  1<<7,      0,          -1 },
    { "Slack",       		    NULL,     NULL,  1<<8,      0,          -1 },
};

/* layout(s) */
static const float mfact     = 0.66; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
    /* symbol     arrange function */
    { "[]=",      tile },    /* first entry is default */
    { "><>",      NULL },    /* no layout function means floating behavior */
    { "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
    { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
    { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", color_black, "-nf", color_light_white, "-sb", color_black, "-sf", color_light_yellow, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *volume_up[]       = { "/usr/bin/pactl", "set-sink-volume", "@DEFAULT_SINK@",   "+5%",    NULL };
static const char *volume_down[]     = { "/usr/bin/pactl", "set-sink-volume", "@DEFAULT_SINK@",   "-5%",    NULL };
static const char *volume_mute[]     = { "/usr/bin/pactl", "set-sink-mute",   "@DEFAULT_SINK@",   "toggle", NULL };
static const char *microphone_mute[] = { "/usr/bin/pactl", "set-source-mute", "@DEFAULT_SOURCE@", "toggle", NULL };
static const char *brightness_up[]   = { "/usr/bin/light", "-A", "5", NULL };
static const char *brightness_down[] = { "/usr/bin/light", "-U", "5", NULL };

static Key keys[] = {
    /* modifier           key                       function        argument */
    { MODKEY,             XK_p,                     spawn,          {.v = dmenucmd } },
    { MODKEY|ShiftMask,   XK_Return,                spawn,          {.v = termcmd } },
    { MODKEY,             XK_b,                     togglebar,      {0} },
    { MODKEY,             XK_j,                     focusstack,     {.i = +1 } },
    { MODKEY,             XK_k,                     focusstack,     {.i = -1 } },
    { MODKEY,             XK_i,                     incnmaster,     {.i = +1 } },
    { MODKEY,             XK_d,                     incnmaster,     {.i = -1 } },
    { MODKEY,             XK_h,                     setmfact,       {.f = -0.05} },
    { MODKEY,             XK_l,                     setmfact,       {.f = +0.05} },
    { MODKEY,             XK_Return,                zoom,           {0} },
    { MODKEY,             XK_Tab,                   view,           {0} },
    { MODKEY|ShiftMask,   XK_c,                     killclient,     {0} },
    { MODKEY,             XK_t,                     setlayout,      {.v = &layouts[0]} },
    { MODKEY,             XK_f,                     setlayout,      {.v = &layouts[1]} },
    { MODKEY,             XK_m,                     setlayout,      {.v = &layouts[2]} },
    { MODKEY,             XK_space,                 setlayout,      {0} },
    { MODKEY|ShiftMask,   XK_space,                 togglefloating, {0} },
    { MODKEY,             XK_0,                     view,           {.ui = ~0 } },
    { MODKEY|ShiftMask,   XK_0,                     tag,            {.ui = ~0 } },
    { MODKEY,             XK_comma,                 focusmon,       {.i = -1 } },
    { MODKEY,             XK_period,                focusmon,       {.i = +1 } },
    { MODKEY|ShiftMask,   XK_comma,                 tagmon,         {.i = -1 } },
    { MODKEY|ShiftMask,   XK_period,                tagmon,         {.i = +1 } },
    { 0,                  XF86XK_AudioRaiseVolume,  spawn,          {.v = volume_up       } },
    { 0,                  XF86XK_AudioLowerVolume,  spawn,          {.v = volume_down     } },
    { 0,                  XF86XK_AudioMute,         spawn,          {.v = volume_mute     } },
    { 0,                  XF86XK_AudioMicMute,      spawn,          {.v = microphone_mute } },
    { 0,                  XF86XK_MonBrightnessUp,   spawn,          {.v = brightness_up   } },
    { 0,                  XF86XK_MonBrightnessDown, spawn,          {.v = brightness_down } },
    TAGKEYS(              XK_1,                      0)
    TAGKEYS(              XK_2,                      1)
    TAGKEYS(              XK_3,                      2)
    TAGKEYS(              XK_4,                      3)
    TAGKEYS(              XK_5,                      4)
    TAGKEYS(              XK_6,                      5)
    TAGKEYS(              XK_7,                      6)
    TAGKEYS(              XK_8,                      7)
    TAGKEYS(              XK_9,                      8)
    { MODKEY|ShiftMask,   XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click                event mask      button          function        argument */
    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
    { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
    { ClkTagBar,            0,              Button1,        view,           {0} },
    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
